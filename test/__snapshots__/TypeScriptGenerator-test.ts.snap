// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeScriptGenerator matches expected output: conditional.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ConditionField on Node {
  id @include(if: $condition)
}

fragment NestedCondition on Node {
  ... @include(if: $condition) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import { FragmentReference } from "relay-runtime";
export enum ConditionField_ref {
}
export type ConditionField = {
    readonly id?: string;
    readonly " $refType": ConditionField_ref;
};


import { FragmentReference } from "relay-runtime";
export enum NestedCondition_ref {
}
export type NestedCondition = {
    readonly id?: string;
    readonly " $refType": NestedCondition_ref;
};

`;

exports[`TypeScriptGenerator matches expected output: fragment-spread.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment FragmentSpread on Node {
  id
  ...OtherFragment
  justFrag: profilePicture {
    ...PictureFragment
  }
  fragAndField: profilePicture {
    uri
    ...PictureFragment
  }
  ... on User {
    ...UserFrag1
    ...UserFrag2
  }
}

fragment ConcreateTypes on Viewer {
  actor {
    __typename
    ... on Page {
      id
      ...PageFragment
    }
    ... on User {
      name
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
TODO

exports[`TypeScriptGenerator matches expected output: inline-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment InlineFragment on Node {
  id
  ... on Actor {
    id
    name
  }
  ... on User {
    message {
      text
    }
  }
}

fragment InlineFragmentWithOverlappingFields on Actor {
  ... on User {
    hometown {
      id
      name
    }
  }
  ... on Page {
    name
    hometown {
      id
      message {
        text
      }
    }
  }
}

fragment InlineFragmentConditionalID on Node {
  ... on Actor {
    id # nullable since it's conditional
    name
  }
}

fragment InlineFragmentKitchenSink on Story {
  actor {
    id
    profilePicture {
      uri
    }
    ... on User {
      id
      name
      ...SomeFragment
      profilePicture {
        width
      }
    }
    ... on Page {
      profilePicture {
        uri
        height
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
TODO

exports[`TypeScriptGenerator matches expected output: linked-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedField on User {
  profilePicture {
    uri
    width
    height
  }
  hometown {
    # object
    id
    profilePicture {
      uri
    }
  }
  actor {
    # interface
    id
  }
}

query UnionTypeTest {
  neverNode {
    __typename
    ... on FakeNode {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import { FragmentReference } from "relay-runtime";
export enum LinkedField_ref {
}
export type LinkedField = {
    readonly profilePicture: ({
        readonly uri: string | null;
        readonly width: number | null;
        readonly height: number | null;
    }) | null;
    readonly hometown: ({
        readonly id: string;
        readonly profilePicture: ({
            readonly uri: string | null;
        }) | null;
    }) | null;
    readonly actor: ({
        readonly id: string;
    }) | null;
    readonly " $refType": LinkedField_ref;
};


export type UnionTypeTestVariables = {
};
export type UnionTypeTestResponse = {
    readonly neverNode: ({
        readonly __typename: "FakeNode";
        readonly id: string;
    } | {
        /*This will never be '% other', but we need some
        value in case none of the concrete values match.*/
        readonly __typename: "%other";
    }) | null;
};

`;

exports[`TypeScriptGenerator matches expected output: mutation.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation CommentCreateMutation(
  $input: CommentCreateInput!
  $first: Int
  $orderBy: [String!]
) {
  commentCreate(input: $input) {
    comment {
      id
      name
      friends(first: $first, orderby: $orderBy) {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type CommentCreateMutationVariables = {
    readonly input: {
        readonly clientMutationId: string | null;
        readonly feedbackId: string | null;
    };
    readonly first?: number | null;
    readonly orderBy?: ReadonlyArray<string> | null;
};
export type CommentCreateMutationResponse = {
    readonly commentCreate: ({
        readonly comment: ({
            readonly id: string;
            readonly name: string | null;
            readonly friends: ({
                readonly count: number | null;
            }) | null;
        }) | null;
    }) | null;
};

`;

exports[`TypeScriptGenerator matches expected output: mutation-input-has-array.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation InputHasArray($input: UpdateAllSeenStateInput) {
  viewerNotificationsUpdateAllSeenState(input: $input) {
    stories {
      actorCount
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type InputHasArrayVariables = {
    readonly input?: {
        readonly clientMutationId: string | null;
        readonly storyIds: ReadonlyArray<string | null> | null;
    } | null;
};
export type InputHasArrayResponse = {
    readonly viewerNotificationsUpdateAllSeenState: ({
        readonly stories: ReadonlyArray<({
                readonly actorCount: number | null;
            }) | null> | null;
    }) | null;
};

`;

exports[`TypeScriptGenerator matches expected output: plural-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment PluralFragment on Node @relay(plural: true) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import { FragmentReference } from "relay-runtime";
export enum PluralFragment_ref {
}
export type PluralFragment = ReadonlyArray<{
        readonly id: string;
        readonly " $refType": PluralFragment_ref;
    }>;

`;

exports[`TypeScriptGenerator matches expected output: roots.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ExampleQuery($id: ID!) {
  node(id: $id) {
    id
  }
}

fragment ExampleFragment on User {
  id
}

mutation TestMutation($input: CommentCreateInput!) {
  commentCreate(input: $input) {
    comment {
      id
    }
  }
}

subscription TestSubscription($input: FeedbackLikeInput) {
  feedbackLikeSubscribe(input: $input) {
    feedback {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type ExampleQueryVariables = {
    readonly id: string;
};
export type ExampleQueryResponse = {
    readonly node: ({
        readonly id: string;
    }) | null;
};


import { FragmentReference } from "relay-runtime";
export enum ExampleFragment_ref {
}
export type ExampleFragment = {
    readonly id: string;
    readonly " $refType": ExampleFragment_ref;
};


export type TestMutationVariables = {
    readonly input: {
        readonly clientMutationId: string | null;
        readonly feedbackId: string | null;
    };
};
export type TestMutationResponse = {
    readonly commentCreate: ({
        readonly comment: ({
            readonly id: string;
        }) | null;
    }) | null;
};


export type TestSubscriptionVariables = {
    readonly input?: {
        readonly clientMutationId: string | null;
        readonly feedbackId: string | null;
    } | null;
};
export type TestSubscriptionResponse = {
    readonly feedbackLikeSubscribe: ({
        readonly feedback: ({
            readonly id: string;
        }) | null;
    }) | null;
};

`;

exports[`TypeScriptGenerator matches expected output: scalar-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ScalarField on User {
  id
  name
  websites
  traits
  aliasedLinkedField: birthdate {
    aliasedField: year
  }
  screennames {
    name
    service
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type PersonalityTraits = CHEERFUL | DERISIVE | HELPFUL | SNARKY | %future added value;
import { FragmentReference } from "relay-runtime";
export enum ScalarField_ref {
}
export type ScalarField = {
    readonly id: string;
    readonly name: string | null;
    readonly websites: ReadonlyArray<string | null> | null;
    readonly traits: ReadonlyArray<PersonalityTraits | null> | null;
    readonly aliasedLinkedField: ({
        readonly aliasedField: number | null;
    }) | null;
    readonly screennames: ReadonlyArray<({
            readonly name: string | null;
            readonly service: string | null;
        }) | null> | null;
    readonly " $refType": ScalarField_ref;
};

`;

exports[`TypeScriptGenerator matches expected output: typename-on-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TypenameInside on Actor {
  ... on User {
    __typename
    firstName
  }
  ... on Page {
    __typename
    username
  }
}

fragment TypenameOutside on Actor {
  __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameOutsideWithAbstractType on Node {
  __typename
  ... on User {
    firstName
    address {
      street # only here
      city # common
    }
  }
  ... on Actor {
    username
    address {
      city # common
      country # only here
    }
  }
}

fragment TypenameWithoutSpreads on User {
  __typename
  firstName
}

fragment TypenameWithoutSpreadsAbstractType on Node {
  __typename
  id
}


fragment TypenameWithCommonSelections on Actor {
  __typename
  name
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import { FragmentReference } from "relay-runtime";
export enum TypenameInside_ref {
}
export type TypenameInside = {
    readonly __typename: "User";
    readonly firstName: string | null;
    readonly " $refType": TypenameInside_ref;
} | {
    readonly __typename: "Page";
    readonly username: string | null;
    readonly " $refType": TypenameInside_ref;
} | {
    /*This will never be '% other', but we need some
    value in case none of the concrete values match.*/
    readonly __typename: "%other";
    readonly " $refType": TypenameInside_ref;
};


import { FragmentReference } from "relay-runtime";
export enum TypenameOutside_ref {
}
export type TypenameOutside = {
    readonly __typename: "User";
    readonly firstName: string | null;
    readonly " $refType": TypenameOutside_ref;
} | {
    readonly __typename: "Page";
    readonly username: string | null;
    readonly " $refType": TypenameOutside_ref;
} | {
    /*This will never be '% other', but we need some
    value in case none of the concrete values match.*/
    readonly __typename: "%other";
    readonly " $refType": TypenameOutside_ref;
};


import { FragmentReference } from "relay-runtime";
export enum TypenameOutsideWithAbstractType_ref {
}
export type TypenameOutsideWithAbstractType = {
    readonly __typename: string;
    readonly username?: string | null;
    readonly address?: ({
        readonly city: string | null;
        readonly country: string | null;
        readonly street?: string | null;
    }) | null;
    readonly firstName?: string | null;
    readonly " $refType": TypenameOutsideWithAbstractType_ref;
};


import { FragmentReference } from "relay-runtime";
export enum TypenameWithoutSpreads_ref {
}
export type TypenameWithoutSpreads = {
    readonly firstName: string | null;
    readonly __typename: "User";
    readonly " $refType": TypenameWithoutSpreads_ref;
};


import { FragmentReference } from "relay-runtime";
export enum TypenameWithoutSpreadsAbstractType_ref {
}
export type TypenameWithoutSpreadsAbstractType = {
    readonly __typename: string;
    readonly id: string;
    readonly " $refType": TypenameWithoutSpreadsAbstractType_ref;
};


import { FragmentReference } from "relay-runtime";
export enum TypenameWithCommonSelections_ref {
}
export type TypenameWithCommonSelections = {
    readonly __typename: string;
    readonly name: string | null;
    readonly firstName?: string | null;
    readonly username?: string | null;
    readonly " $refType": TypenameWithCommonSelections_ref;
};

`;

exports[`TypeScriptGenerator matches expected output: unmasked-fragment-spreads.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserProfile on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    ...PhotoFragment @relay(mask: false)

    # duplicated field should be merged
    ...AnotherRecursiveFragment @relay(mask: false)

    # Compose child fragment
    ...PhotoFragment
  }
}

fragment PhotoFragment on Image {
  uri
  ...RecursiveFragment @relay(mask: false)
}

fragment RecursiveFragment on Image {
  uri
  width
}

fragment AnotherRecursiveFragment on Image {
  uri
  height
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
TODO
